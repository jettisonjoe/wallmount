#!/usr/bin/env python


""" wallmount

wallmount is a command line tool to deploy p5js sketches in conjunction with a
companion wallmount server, wallmountd. Because it relies on shell utilities
such as rsync, it is designed for use in a linux-like environment.

TODO: rsync directory to server.

"""

import calendar
import shutil
import sys
import time


PUSH_ID_FILE = '.wallmount_push_id'
SERVER = '192.168.1.39'


def push():
	"""Push a sketch."""
	print 'Attempting to push sketch from the current directory.'
	
	config_file = find_config_file()
	if config_file is None:
		print 'Unable to find a .wallmount_config file from this directory.'
		return False
	print 'Found config file at: %s' % config_file
	
	project_path = None
	with open(config_file) as f:
		project_path = f.readline().rstrip()
	if not os.path.exists(project_path):
		print 'Unable to read a valid project path from config file.'
		return False

	push_id_file = os.path.join(project_path, PUSH_ID_FILE)
	with open(push_id_file, 'w+') as f:
		f.write(generate_push_id())

	# TODO: rsync

	os.remove(push_id_file)
	return True


def find_config_file():
	"""Walk up from the cwd looking for a config file."""
	search_dir = os.getcwd()
	while search_dir.count(os.sep) > 2:
		candidate = os.path.join(search_dir, PUSH_ID_FILE)
		if os.path.isfile(candidate):
			return candidate
		search_dir = os.path.abspath(os.path.join(search_dir, os.pardir))
	return None


def generate_push_id():
	"""Generate a pseudo-unique push id."""
	return calendar.timegm(time.gmtime())


def main(unused_argv):
	if push():
		print 'Push appeared successful!'
	else:
		print 'Push failed.'


if __name__ == '__main__':
	main(sys.argv)
