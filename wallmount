#!/usr/bin/env python


""" wallmount

wallmount is a command line tool to deploy p5js sketches in conjunction with a
companion wallmount server, wallmountd. Because it relies on shell utilities
such as rsync, it is designed for use in a linux-like environment.

TODO: rsync directory to server.

"""

import calendar
import os
import subprocess
import sys
import time


DOTFILE = '.wallmount'
SERVER = 'marahute'
SERVER_PORT = '2200'
SERVER_PATH = '/usr/local/wallmount'


def push():
	"""Push a sketch."""
	print 'Attempting to push sketch from the current directory.'
	
	dotfile = find_dotfile()
	if dotfile is None:
		print 'Unable to find a .wallmount file from this directory.'
		return False
	print 'Found config file at:\n%s' % dotfile
	
	with open(dotfile, 'w') as f:
		f.write(generate_push_id())

	push_dir = os.path.dirname(dotfile)
	result = os.system('rsync -va --delete --dry-run '
		                 '-e \"ssh -p%s\" '
		                 '%s %s:%s' % (SERVER_PORT, push_dir, SERVER, SERVER_PATH))
	if result != 0:
		print 'Unable to sync files to the server.'
		return False
	return True


def find_dotfile():
	"""Walk up from the cwd looking for a .wallmount file."""
	search_dir = os.getcwd()
	while search_dir.count(os.sep) > 2:
		candidate = os.path.join(search_dir, DOTFILE)
		if os.path.isfile(candidate):
			return candidate
		search_dir = os.path.abspath(os.path.join(search_dir, os.pardir))
	return None


def generate_push_id():
	"""Generate a pseudo-unique push id."""
	return str(calendar.timegm(time.gmtime()))


def main(unused_argv):
	if push():
		print 'Push appeared successful!'
	else:
		print 'Push failed.'


if __name__ == '__main__':
	main(sys.argv)
